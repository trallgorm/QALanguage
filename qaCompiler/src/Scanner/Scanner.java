/* The following code was generated by JFlex 1.6.1 */

package Scanner;
import java_cup.runtime.*;
import Parser.sym;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/Scanner/qatest.flex</tt>
 */
public class Scanner implements Parser.sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\17\1\3\1\6\1\47\1\50\1\5\22\17\1\3\1\17\1\45"+
    "\1\17\1\17\1\51\1\17\1\46\3\17\1\17\1\17\2\17\1\16"+
    "\1\1\11\2\1\15\2\17\1\17\1\17\1\17\1\17\13\4\1\43"+
    "\5\4\1\42\2\4\1\41\5\4\1\17\1\7\2\17\1\4\1\17"+
    "\1\21\1\25\1\36\1\34\1\24\1\10\1\31\1\13\1\22\1\4"+
    "\1\40\1\33\1\20\1\23\1\27\1\12\1\4\1\37\1\14\1\11"+
    "\1\26\1\35\1\30\1\32\2\4\1\17\1\44\10\17\1\47\32\17"+
    "\1\0\11\17\1\17\12\17\1\17\4\17\1\17\5\17\27\17\1\17"+
    "\37\17\1\17\u01ca\17\4\17\14\17\16\17\5\17\7\17\1\17\1\17"+
    "\1\17\21\17\165\17\1\17\2\17\2\17\4\17\1\17\1\17\6\17"+
    "\1\17\1\17\3\17\1\17\1\17\1\17\24\17\1\17\123\17\1\17"+
    "\213\17\1\17\255\17\1\17\46\17\2\17\1\17\7\17\47\17\11\17"+
    "\55\17\1\17\1\17\1\17\2\17\1\17\2\17\1\17\1\17\10\17"+
    "\33\17\5\17\3\17\35\17\13\17\5\17\112\17\4\17\146\17\1\17"+
    "\10\17\2\17\12\17\1\17\23\17\2\17\1\17\20\17\73\17\2\17"+
    "\145\17\16\17\66\17\4\17\1\17\5\17\56\17\22\17\34\17\104\17"+
    "\23\17\61\17\200\17\2\17\12\17\1\17\23\17\1\17\10\17\2\17"+
    "\2\17\2\17\26\17\1\17\7\17\1\17\1\17\3\17\4\17\2\17"+
    "\11\17\2\17\2\17\2\17\4\17\10\17\1\17\4\17\2\17\1\17"+
    "\5\17\2\17\14\17\17\17\3\17\1\17\6\17\4\17\2\17\2\17"+
    "\26\17\1\17\7\17\1\17\2\17\1\17\2\17\1\17\2\17\2\17"+
    "\1\17\1\17\5\17\4\17\2\17\2\17\3\17\3\17\1\17\7\17"+
    "\4\17\1\17\1\17\7\17\20\17\13\17\3\17\1\17\11\17\1\17"+
    "\3\17\1\17\26\17\1\17\7\17\1\17\2\17\1\17\5\17\2\17"+
    "\12\17\1\17\3\17\1\17\3\17\2\17\1\17\17\17\4\17\2\17"+
    "\12\17\21\17\3\17\1\17\10\17\2\17\2\17\2\17\26\17\1\17"+
    "\7\17\1\17\2\17\1\17\5\17\2\17\11\17\2\17\2\17\2\17"+
    "\3\17\10\17\2\17\4\17\2\17\1\17\5\17\2\17\12\17\1\17"+
    "\1\17\20\17\2\17\1\17\6\17\3\17\3\17\1\17\4\17\3\17"+
    "\2\17\1\17\1\17\1\17\2\17\3\17\2\17\3\17\3\17\3\17"+
    "\14\17\4\17\5\17\3\17\3\17\1\17\4\17\2\17\1\17\6\17"+
    "\1\17\16\17\12\17\20\17\4\17\1\17\10\17\1\17\3\17\1\17"+
    "\27\17\1\17\20\17\3\17\10\17\1\17\3\17\1\17\4\17\7\17"+
    "\2\17\1\17\2\17\6\17\4\17\2\17\12\17\21\17\3\17\1\17"+
    "\10\17\1\17\3\17\1\17\27\17\1\17\12\17\1\17\5\17\2\17"+
    "\11\17\1\17\3\17\1\17\4\17\7\17\2\17\7\17\1\17\1\17"+
    "\4\17\2\17\12\17\1\17\2\17\16\17\3\17\1\17\10\17\1\17"+
    "\3\17\1\17\51\17\2\17\10\17\1\17\3\17\1\17\5\17\10\17"+
    "\1\17\10\17\4\17\2\17\12\17\12\17\6\17\2\17\2\17\1\17"+
    "\22\17\3\17\30\17\1\17\11\17\1\17\1\17\2\17\7\17\3\17"+
    "\1\17\4\17\6\17\1\17\1\17\1\17\10\17\6\17\12\17\2\17"+
    "\2\17\15\17\72\17\5\17\17\17\1\17\12\17\47\17\2\17\1\17"+
    "\1\17\2\17\2\17\1\17\1\17\2\17\1\17\6\17\4\17\1\17"+
    "\7\17\1\17\3\17\1\17\1\17\1\17\1\17\2\17\2\17\1\17"+
    "\15\17\1\17\3\17\2\17\5\17\1\17\1\17\1\17\6\17\2\17"+
    "\12\17\2\17\4\17\40\17\1\17\27\17\2\17\6\17\12\17\13\17"+
    "\1\17\1\17\1\17\1\17\1\17\4\17\12\17\1\17\44\17\4\17"+
    "\24\17\1\17\22\17\1\17\44\17\11\17\1\17\71\17\112\17\6\17"+
    "\116\17\2\17\46\17\1\17\1\17\5\17\1\17\2\17\53\17\1\17"+
    "\u014d\17\1\17\4\17\2\17\7\17\1\17\1\17\1\17\4\17\2\17"+
    "\51\17\1\17\4\17\2\17\41\17\1\17\4\17\2\17\7\17\1\17"+
    "\1\17\1\17\4\17\2\17\17\17\1\17\71\17\1\17\4\17\2\17"+
    "\103\17\2\17\3\17\40\17\20\17\20\17\125\17\14\17\u026c\17\2\17"+
    "\21\17\1\0\32\17\5\17\113\17\3\17\13\17\7\17\15\17\1\17"+
    "\7\17\13\17\25\17\13\17\24\17\14\17\15\17\1\17\3\17\1\17"+
    "\2\17\14\17\124\17\3\17\1\17\4\17\2\17\2\17\12\17\41\17"+
    "\3\17\2\17\12\17\6\17\130\17\10\17\53\17\5\17\106\17\12\17"+
    "\37\17\1\17\14\17\4\17\14\17\12\17\50\17\2\17\5\17\13\17"+
    "\54\17\4\17\32\17\6\17\12\17\46\17\34\17\4\17\77\17\1\17"+
    "\35\17\2\17\13\17\6\17\12\17\15\17\1\17\10\17\17\17\101\17"+
    "\114\17\4\17\12\17\21\17\11\17\14\17\164\17\14\17\70\17\10\17"+
    "\12\17\3\17\61\17\122\17\3\17\1\17\43\17\1\17\2\17\6\17"+
    "\366\17\6\17\u011a\17\2\17\6\17\2\17\46\17\2\17\6\17\2\17"+
    "\10\17\1\17\1\17\1\17\1\17\1\17\1\17\1\17\37\17\2\17"+
    "\65\17\1\17\7\17\1\17\1\17\3\17\3\17\1\17\7\17\3\17"+
    "\4\17\2\17\6\17\4\17\15\17\5\17\3\17\1\17\7\17\3\17"+
    "\13\0\35\17\1\47\1\47\5\17\1\0\17\17\2\17\23\17\1\17"+
    "\12\17\1\0\21\17\1\17\15\17\1\17\20\17\15\17\63\17\41\17"+
    "\21\17\1\17\4\17\1\17\2\17\12\17\1\17\1\17\3\17\5\17"+
    "\6\17\1\17\1\17\1\17\1\17\1\17\1\17\4\17\1\17\13\17"+
    "\2\17\4\17\5\17\5\17\4\17\1\17\21\17\51\17\u032d\17\64\17"+
    "\u0716\17\57\17\1\17\57\17\1\17\205\17\6\17\11\17\14\17\46\17"+
    "\1\17\1\17\5\17\1\17\2\17\70\17\7\17\1\17\17\17\30\17"+
    "\11\17\7\17\1\17\7\17\1\17\7\17\1\17\7\17\1\17\7\17"+
    "\1\17\7\17\1\17\7\17\1\17\7\17\1\17\40\17\57\17\1\17"+
    "\u01d0\17\1\0\4\17\3\17\31\17\17\17\1\17\5\17\2\17\5\17"+
    "\4\17\126\17\2\17\2\17\2\17\3\17\1\17\132\17\1\17\4\17"+
    "\5\17\51\17\3\17\136\17\21\17\33\17\65\17\20\17\u0200\17\u19b6\17"+
    "\112\17\u51cd\17\63\17\u048d\17\103\17\56\17\2\17\u010d\17\3\17\34\17"+
    "\24\17\63\17\1\17\12\17\1\17\37\17\1\17\123\17\45\17\11\17"+
    "\2\17\147\17\2\17\4\17\1\17\36\17\2\17\2\17\105\17\61\17"+
    "\30\17\64\17\14\17\105\17\13\17\12\17\6\17\30\17\3\17\1\17"+
    "\4\17\56\17\2\17\44\17\14\17\35\17\3\17\101\17\16\17\13\17"+
    "\6\17\37\17\1\17\67\17\11\17\16\17\2\17\12\17\6\17\27\17"+
    "\3\17\111\17\30\17\3\17\2\17\20\17\2\17\5\17\12\17\6\17"+
    "\2\17\6\17\2\17\6\17\11\17\7\17\1\17\7\17\1\17\53\17"+
    "\1\17\4\17\4\17\2\17\132\17\53\17\1\17\2\17\2\17\12\17"+
    "\6\17\u2ba4\17\14\17\27\17\4\17\61\17\u2104\17\u016e\17\2\17\152\17"+
    "\46\17\7\17\14\17\5\17\5\17\14\17\1\17\15\17\1\17\5\17"+
    "\1\17\1\17\1\17\2\17\1\17\2\17\1\17\154\17\41\17\u016b\17"+
    "\22\17\100\17\2\17\66\17\50\17\14\17\4\17\20\17\20\17\16\17"+
    "\5\17\2\17\30\17\3\17\40\17\5\17\1\17\207\17\23\17\12\17"+
    "\7\17\32\17\4\17\1\17\1\17\32\17\13\17\131\17\3\17\6\17"+
    "\2\17\6\17\2\17\6\17\2\17\3\17\43\17\14\17\1\17\32\17"+
    "\1\17\23\17\1\17\2\17\1\17\17\17\2\17\16\17\42\17\173\17"+
    "\105\17\65\17\210\17\1\17\202\17\35\17\3\17\61\17\17\17\1\17"+
    "\37\17\40\17\20\17\33\17\5\17\53\17\5\17\36\17\2\17\44\17"+
    "\4\17\10\17\1\17\5\17\52\17\236\17\2\17\12\17\126\17\50\17"+
    "\10\17\64\17\234\17\u0137\17\11\17\26\17\12\17\10\17\230\17\6\17"+
    "\2\17\1\17\1\17\54\17\1\17\2\17\3\17\1\17\2\17\27\17"+
    "\12\17\27\17\11\17\37\17\141\17\26\17\12\17\32\17\106\17\70\17"+
    "\6\17\2\17\100\17\4\17\1\17\2\17\5\17\10\17\1\17\3\17"+
    "\1\17\33\17\4\17\3\17\4\17\1\17\40\17\35\17\3\17\35\17"+
    "\43\17\10\17\1\17\36\17\31\17\66\17\12\17\26\17\12\17\23\17"+
    "\15\17\22\17\156\17\111\17\u03b7\17\107\17\37\17\12\17\17\17\74\17"+
    "\25\17\31\17\7\17\12\17\6\17\65\17\1\17\12\17\20\17\44\17"+
    "\2\17\1\17\11\17\105\17\13\17\13\17\45\17\22\17\1\17\45\17"+
    "\170\17\73\17\5\17\12\17\7\17\3\17\1\17\10\17\2\17\2\17"+
    "\2\17\26\17\1\17\7\17\1\17\2\17\1\17\5\17\2\17\11\17"+
    "\2\17\2\17\2\17\3\17\11\17\1\17\5\17\7\17\2\17\7\17"+
    "\3\17\5\17\u010b\17\106\17\1\17\1\17\10\17\12\17\246\17\66\17"+
    "\2\17\11\17\77\17\101\17\3\17\1\17\13\17\12\17\46\17\70\17"+
    "\10\17\12\17\u01d6\17\112\17\25\17\1\17\u01c0\17\71\17\u0507\17\u0399\17"+
    "\147\17\157\17\u0b91\17\u042f\17\u33d1\17\u0239\17\7\17\37\17\1\17\12\17"+
    "\146\17\36\17\2\17\5\17\13\17\67\17\11\17\4\17\14\17\12\17"+
    "\11\17\25\17\5\17\23\17\u0370\17\105\17\13\17\57\17\20\17\21\17"+
    "\u4060\17\2\17\u0bfe\17\153\17\5\17\15\17\3\17\11\17\7\17\12\17"+
    "\3\17\2\17\u14c6\17\5\17\3\17\6\17\10\17\10\17\2\17\7\17"+
    "\36\17\4\17\224\17\3\17\u01bb\17\125\17\1\17\107\17\1\17\2\17"+
    "\2\17\1\17\2\17\2\17\2\17\4\17\1\17\14\17\1\17\1\17"+
    "\1\17\7\17\1\17\101\17\1\17\4\17\2\17\10\17\1\17\7\17"+
    "\1\17\34\17\1\17\4\17\1\17\5\17\1\17\1\17\3\17\7\17"+
    "\1\17\u0154\17\2\17\31\17\1\17\31\17\1\17\37\17\1\17\31\17"+
    "\1\17\37\17\1\17\31\17\1\17\37\17\1\17\31\17\1\17\37\17"+
    "\1\17\31\17\1\17\10\17\2\17\62\17\u1000\17\305\17\13\17\7\17"+
    "\u0529\17\4\17\1\17\33\17\1\17\2\17\1\17\1\17\2\17\1\17"+
    "\1\17\12\17\1\17\4\17\1\17\1\17\1\17\1\17\6\17\1\17"+
    "\4\17\1\17\1\17\1\17\1\17\1\17\1\17\3\17\1\17\2\17"+
    "\1\17\1\17\2\17\1\17\1\17\1\17\1\17\1\17\1\17\1\17"+
    "\1\17\1\17\1\17\2\17\1\17\1\17\2\17\4\17\1\17\7\17"+
    "\1\17\4\17\1\17\4\17\1\17\1\17\1\17\12\17\1\17\21\17"+
    "\5\17\3\17\1\17\5\17\1\17\21\17\u0274\17\32\17\6\17\32\17"+
    "\6\17\32\17\u0e76\17\ua6d7\17\51\17\u1035\17\13\17\336\17\u3fe2\17\u021e\17"+
    "\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\uffff\17\u06ed\17"+
    "\360\17\uffff\17\uffff\17\ufe12\17";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\4\5\3\1\5\17\3"+
    "\1\6\1\7\1\0\1\10\2\11\1\0\1\12\1\10"+
    "\5\3\1\13\10\3\1\14\1\15\1\16\4\3\1\17"+
    "\4\3\1\20\1\3\1\21\6\3\1\0\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\13\3\1\33\23\3\1\34\1\35\1\0\1\36\1\37"+
    "\3\3\1\40\1\41\1\42\2\3\1\43\1\3\1\44"+
    "\1\3\1\45\2\3\1\46\3\3\1\47\7\3\1\0"+
    "\1\50\1\51\1\40\3\3\1\52\1\3\1\53\4\3"+
    "\1\54\2\3\1\55\1\3\1\0\2\3\1\56\1\57"+
    "\1\60\1\61\5\3\1\62\3\3\1\63\1\64\1\65"+
    "\1\66\3\3\1\65\1\67\1\3\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\176\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\176\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\176\0\176"+
    "\0\u0498\0\u04c2\0\u04ec\0\176\0\u0516\0\176\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\374\0\u063c\0\u0666\0\u0690"+
    "\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\374\0\374\0\374"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\374\0\u0834\0\u085e\0\u0888"+
    "\0\u08b2\0\374\0\u08dc\0\374\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\176\0\176\0\176\0\176\0\176"+
    "\0\176\0\176\0\176\0\176\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa"+
    "\0\374\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\374\0\176\0\u0f42\0\374"+
    "\0\374\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\374\0\u103e"+
    "\0\u1068\0\374\0\u1092\0\374\0\u10bc\0\374\0\u10e6\0\u1110"+
    "\0\374\0\u113a\0\u1164\0\u118e\0\374\0\u11b8\0\u11e2\0\u120c"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\374\0\374\0\374"+
    "\0\u1308\0\u1332\0\u135c\0\374\0\u1386\0\374\0\u13b0\0\u13da"+
    "\0\u1404\0\u142e\0\374\0\u1458\0\u1482\0\374\0\u14ac\0\u14d6"+
    "\0\u1500\0\u152a\0\374\0\374\0\374\0\374\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u14d6\0\u1626\0\u1650\0\u167a\0\374"+
    "\0\374\0\u16a4\0\374\0\u16ce\0\u16f8\0\u1722\0\374\0\374"+
    "\0\u174c\0\374\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\7\1\26\1\27"+
    "\1\30\1\7\1\31\1\32\1\33\1\34\1\35\1\7"+
    "\1\36\2\7\1\37\1\40\2\0\1\6\1\41\5\42"+
    "\1\43\1\44\1\45\35\42\1\46\3\42\1\47\51\0"+
    "\1\41\53\0\2\5\52\0\1\6\44\0\1\6\2\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\24\7\14\0"+
    "\1\11\44\0\2\7\1\0\1\7\3\0\1\7\1\50"+
    "\3\7\3\0\17\7\1\51\4\7\7\0\2\7\1\0"+
    "\1\7\3\0\3\7\1\52\1\7\3\0\2\7\1\53"+
    "\1\7\1\54\2\7\1\55\14\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\13\7\1\56\3\7\1\57"+
    "\4\7\7\0\2\7\1\0\1\7\3\0\1\7\1\60"+
    "\3\7\3\0\1\7\1\61\22\7\7\0\2\7\1\0"+
    "\1\7\3\0\1\7\1\62\1\7\1\63\1\7\3\0"+
    "\24\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\1\7\1\64\1\65\21\7\7\0\2\7\1\0\1\7"+
    "\3\0\1\7\1\66\3\7\3\0\24\7\7\0\2\7"+
    "\1\0\1\7\3\0\1\67\3\7\1\70\3\0\3\7"+
    "\1\71\20\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\6\7\1\72\15\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\3\7\1\73\6\7\1\74\11\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\4\7"+
    "\1\75\1\7\1\76\15\7\7\0\2\7\1\0\1\7"+
    "\3\0\1\7\1\77\3\7\3\0\24\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\2\7\1\100\1\7"+
    "\1\101\17\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\7\7\1\102\14\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\1\7\1\103\22\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\7\7\1\104\14\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\1\7"+
    "\1\105\22\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\6\7\1\106\1\107\3\7\1\110\10\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\4\7\1\111"+
    "\17\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\22\7\1\112\1\7\57\0\1\113\5\42\3\0\35\42"+
    "\1\0\4\42\6\0\1\44\43\0\5\114\2\0\1\115"+
    "\1\116\1\117\11\114\1\120\1\114\1\121\11\114\1\122"+
    "\5\114\1\123\1\124\2\0\1\114\5\42\3\0\35\42"+
    "\1\0\3\42\1\125\1\0\2\7\1\0\1\7\3\0"+
    "\2\7\1\126\2\7\3\0\24\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\7\7\1\127\14\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\1\7\1\130"+
    "\2\7\1\131\2\7\1\132\14\7\7\0\2\7\1\0"+
    "\1\7\3\0\1\7\1\133\3\7\3\0\1\134\23\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\12\7"+
    "\1\135\11\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\6\7\1\136\15\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\4\7\1\137\17\7\7\0\2\7"+
    "\1\0\1\7\3\0\1\7\1\140\3\7\3\0\24\7"+
    "\7\0\2\7\1\0\1\7\3\0\4\7\1\141\3\0"+
    "\15\7\1\142\6\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\4\7\1\143\17\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\7\7\1\144\14\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\2\7\1\145"+
    "\21\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\3\7\1\146\20\7\7\0\2\7\1\0\1\7\3\0"+
    "\1\7\1\147\3\7\3\0\24\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\1\150\23\7\7\0\2\7"+
    "\1\0\1\7\3\0\1\7\1\151\3\7\3\0\24\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\2\7"+
    "\1\152\21\7\7\0\2\7\1\0\1\7\3\0\1\7"+
    "\1\153\3\7\3\0\24\7\7\0\2\7\1\0\1\7"+
    "\3\0\3\7\1\154\1\7\3\0\24\7\7\0\2\7"+
    "\1\0\1\7\3\0\1\7\1\155\3\7\3\0\24\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\5\7"+
    "\1\156\16\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\5\7\1\157\16\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\13\7\1\160\10\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\17\7\1\161\4\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\3\7"+
    "\1\162\20\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\2\7\1\163\21\7\7\0\2\7\1\0\1\7"+
    "\3\0\1\164\4\7\3\0\24\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\23\7\1\165\6\0\52\166"+
    "\5\42\3\166\35\42\1\166\4\42\1\0\2\7\1\0"+
    "\1\7\3\0\5\7\1\167\2\0\24\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\1\170\23\7\7\0"+
    "\2\7\1\0\1\7\3\0\1\7\1\171\3\7\3\0"+
    "\24\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\17\7\1\172\4\7\7\0\2\7\1\0\1\7\3\0"+
    "\4\7\1\173\3\0\24\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\13\7\1\174\10\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\4\7\1\175\17\7"+
    "\7\0\2\7\1\0\1\7\3\0\1\7\1\176\3\7"+
    "\3\0\24\7\7\0\2\7\1\0\1\7\3\0\4\7"+
    "\1\177\3\0\24\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\14\7\1\200\7\7\7\0\2\7\1\0"+
    "\1\7\3\0\2\7\1\201\2\7\3\0\24\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\4\7\1\141"+
    "\17\7\7\0\2\7\1\0\1\7\3\0\2\7\1\202"+
    "\2\7\3\0\24\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\6\7\1\203\15\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\3\7\1\204\20\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\6\7\1\205"+
    "\15\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\7\7\1\206\14\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\5\7\1\207\16\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\4\7\1\210\17\7\7\0"+
    "\2\7\1\0\1\7\3\0\1\7\1\211\2\7\1\212"+
    "\3\0\24\7\7\0\2\7\1\0\1\7\3\0\1\7"+
    "\1\213\3\7\3\0\24\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\4\7\1\214\17\7\7\0\2\7"+
    "\1\0\1\7\3\0\3\7\1\215\1\7\3\0\24\7"+
    "\7\0\2\7\1\0\1\7\3\0\2\7\1\216\2\7"+
    "\3\0\24\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\4\7\1\217\17\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\6\7\1\220\15\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\17\7\1\221\4\7"+
    "\7\0\2\7\1\0\1\7\3\0\1\7\1\222\3\7"+
    "\3\0\24\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\16\7\1\223\5\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\17\7\1\224\4\7\24\0\1\225"+
    "\34\0\2\7\1\0\1\7\3\0\5\7\3\0\4\7"+
    "\1\226\17\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\4\7\1\171\17\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\4\7\1\227\17\7\7\0\2\7"+
    "\1\0\1\7\3\0\4\7\1\230\3\0\24\7\7\0"+
    "\2\7\1\0\1\7\3\0\1\231\4\7\3\0\24\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\4\7"+
    "\1\232\17\7\7\0\2\7\1\0\1\7\3\0\4\7"+
    "\1\126\1\167\2\0\24\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\13\7\1\233\10\7\7\0\2\7"+
    "\1\0\1\7\3\0\4\7\1\234\3\0\24\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\4\7\1\235"+
    "\17\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\17\7\1\236\4\7\7\0\2\7\1\0\1\7\3\0"+
    "\1\7\1\237\3\7\3\0\24\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\7\7\1\240\14\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\17\7\1\241"+
    "\4\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\1\7\1\242\22\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\13\7\1\227\10\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\4\7\1\243\17\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\4\7\1\244"+
    "\17\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\1\7\1\245\22\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\20\7\1\246\3\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\4\7\1\247\17\7\24\0"+
    "\1\250\34\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\2\7\1\251\21\7\7\0\2\7\1\0\1\7\3\0"+
    "\1\252\4\7\3\0\24\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\14\7\1\253\7\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\17\7\1\254\4\7"+
    "\7\0\2\7\1\0\1\7\3\0\4\7\1\255\3\0"+
    "\24\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\3\7\1\256\20\7\7\0\2\7\1\0\1\7\3\0"+
    "\5\7\3\0\10\7\1\257\13\7\7\0\2\7\1\0"+
    "\1\7\3\0\5\7\3\0\11\7\1\260\12\7\7\0"+
    "\2\7\1\0\1\7\3\0\5\7\3\0\3\7\1\261"+
    "\20\7\7\0\2\7\1\0\1\7\3\0\5\7\3\0"+
    "\2\7\1\262\21\7\7\0\2\7\1\0\1\7\3\0"+
    "\4\7\1\263\3\0\24\7\7\0\2\264\1\0\1\264"+
    "\2\0\40\264\2\0\1\264\1\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\4\7\1\265\17\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\2\7\1\266\21\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\2\7"+
    "\1\267\21\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\4\7\1\270\17\7\7\0\2\7\1\0\1\7"+
    "\3\0\1\7\1\271\3\7\3\0\24\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\3\7\1\272\20\7"+
    "\7\0\2\7\1\0\1\7\3\0\3\7\1\273\1\7"+
    "\3\0\24\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\13\7\1\274\10\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\3\7\1\275\20\7\7\0\2\7"+
    "\1\0\1\7\3\0\4\7\1\276\3\0\24\7\7\0"+
    "\2\7\1\0\1\7\3\0\4\7\1\277\3\0\24\7"+
    "\7\0\2\7\1\0\1\7\3\0\5\7\3\0\14\7"+
    "\1\300\7\7\7\0\2\7\1\0\1\7\3\0\5\7"+
    "\3\0\4\7\1\301\17\7\7\0\2\7\1\0\1\7"+
    "\3\0\5\7\3\0\4\7\1\302\17\7\7\0\2\7"+
    "\1\0\1\7\3\0\5\7\3\0\14\7\1\303\7\7"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6006];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\5\1\1\11\17\1\2\11"+
    "\1\0\2\1\1\11\1\0\1\11\44\1\1\0\11\11"+
    "\41\1\1\11\1\0\35\1\1\0\22\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  public Scanner(java.io.Reader in, ComplexSymbolFactory sf){
  	this(in);
  	symbolFactory = sf;
  }
  ComplexSymbolFactory symbolFactory;

  private Symbol symbol(String name, int sym) {
      return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }

  private Symbol symbol(String name, int sym, Object val) {
      Location left = new Location(yyline+1,yycolumn+1,yychar);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private Symbol symbol(String name, int sym, Object val,int buflength) {
      Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2692) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol("", EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol("",INTEGER, new Integer(yytext()));
            }
          case 58: break;
          case 2: 
            { /*ignore*/
            }
          case 59: break;
          case 3: 
            { return symbol("",ID, yytext());
            }
          case 60: break;
          case 4: 
            { return symbol("",NEWLINE);
            }
          case 61: break;
          case 5: 
            { return symbol("",COLON);
            }
          case 62: break;
          case 6: 
            { return symbol("",PIPE);
            }
          case 63: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 64: break;
          case 8: 
            { string.append( yytext() );
            }
          case 65: break;
          case 9: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 66: break;
          case 10: 
            { yybegin(YYINITIAL); return symbol("",STRING_LITERAL, string.toString());
            }
          case 67: break;
          case 11: 
            { return symbol("",TO);
            }
          case 68: break;
          case 12: 
            { return symbol("",POSITIONINDIC);
            }
          case 69: break;
          case 13: 
            { return symbol("",IF);
            }
          case 70: break;
          case 14: 
            { return symbol("",IS);
            }
          case 71: break;
          case 15: 
            { return symbol("",BE);
            }
          case 72: break;
          case 16: 
            { return symbol("",GO);
            }
          case 73: break;
          case 17: 
            { return symbol("",DO);
            }
          case 74: break;
          case 18: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 75: break;
          case 19: 
            { string.append( '\\' );
            }
          case 76: break;
          case 20: 
            { string.append( '\f' );
            }
          case 77: break;
          case 21: 
            { string.append( '\t' );
            }
          case 78: break;
          case 22: 
            { string.append( '\n' );
            }
          case 79: break;
          case 23: 
            { string.append( '\b' );
            }
          case 80: break;
          case 24: 
            { string.append( '\r' );
            }
          case 81: break;
          case 25: 
            { string.append( '\"' );
            }
          case 82: break;
          case 26: 
            { string.append( '\'' );
            }
          case 83: break;
          case 27: 
            { return symbol("",HAVE);
            }
          case 84: break;
          case 28: 
            { return symbol("", URL_LITERAL);
            }
          case 85: break;
          case 29: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 86: break;
          case 30: 
            { return symbol("",FROM);
            }
          case 87: break;
          case 31: 
            { return symbol("",THAT);
            }
          case 88: break;
          case 32: 
            { return symbol("",TIME);
            }
          case 89: break;
          case 33: 
            { return symbol("",TEXT);
            }
          case 90: break;
          case 34: 
            { return symbol("",PLUS);
            }
          case 91: break;
          case 35: 
            { return symbol("",STEPLITERAL);
            }
          case 92: break;
          case 36: 
            { return symbol("", MAIN);
            }
          case 93: break;
          case 37: 
            { return symbol("",INTO);
            }
          case 94: break;
          case 38: 
            { return symbol("",EXIT);
            }
          case 95: break;
          case 39: 
            { return symbol("",WITH);
            }
          case 96: break;
          case 40: 
            { return symbol("",THERE);
            }
          case 97: break;
          case 41: 
            { return symbol("",ATTRIBUTE);
            }
          case 98: break;
          case 42: 
            { return symbol("",MINUS);
            }
          case 99: break;
          case 43: 
            { return symbol("",ENTER);
            }
          case 100: break;
          case 44: 
            { return symbol("",VALUE);
            }
          case 101: break;
          case 45: 
            { return symbol("",CLICK);
            }
          case 102: break;
          case 46: 
            { return symbol("",SHOULD);
            }
          case 103: break;
          case 47: 
            { return symbol("",NUMBER);
            }
          case 104: break;
          case 48: 
            { return symbol("",EXISTS);
            }
          case 105: break;
          case 49: 
            { return symbol("",BUTTON);
            }
          case 106: break;
          case 50: 
            { return symbol("",URL, yytext());
            }
          case 107: break;
          case 51: 
            { return symbol("",WEBPAGE);
            }
          case 108: break;
          case 52: 
            { return symbol("",LOCALITYINDIC);
            }
          case 109: break;
          case 53: 
            { return symbol("",CONTAIN);
            }
          case 110: break;
          case 54: 
            { return symbol("",REFRESH);
            }
          case 111: break;
          case 55: 
            { return symbol("",TEXTFIELD);
            }
          case 112: break;
          case 56: 
            { return symbol("",OTHERWISE);
            }
          case 113: break;
          case 57: 
            { return symbol("", PREDEFINED);
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
