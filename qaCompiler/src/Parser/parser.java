
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\004\006\000\002\007\004\000\002\007\002" +
    "\000\002\005\004\000\002\005\002\000\002\022\007\000" +
    "\002\022\007\000\002\021\004\000\002\021\002\000\002" +
    "\006\004\000\002\012\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\011\004\000\002\011\002" +
    "\000\002\013\007\000\002\013\004\000\002\013\006\000" +
    "\002\013\006\000\002\013\005\000\002\013\004\000\002" +
    "\013\004\000\002\015\004\000\002\015\002\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\006\000\002\010\006\000\002\010\004\000" +
    "\002\010\004\000\002\010\003\000\002\023\010\000\002" +
    "\023\010\000\002\016\004\000\002\016\002\000\002\017" +
    "\003\000\002\017\005\000\002\017\007\000\002\017\005" +
    "\000\002\026\003\000\002\026\005\000\002\026\007\000" +
    "\002\026\005\000\002\014\006\000\002\014\005\000\002" +
    "\014\005\000\002\024\003\000\002\024\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\004\ufff6\006\007\001\002\000\004\002" +
    "\166\001\002\000\006\002\ufffc\007\157\001\002\000\004" +
    "\004\011\001\002\000\014\002\ufff6\004\ufff6\006\007\007" +
    "\ufff6\012\ufff6\001\002\000\012\002\ufff7\004\ufff7\007\ufff7" +
    "\012\ufff7\001\002\000\004\005\012\001\002\000\004\006" +
    "\013\001\002\000\010\002\ufffa\007\ufffa\012\015\001\002" +
    "\000\010\002\ufffa\007\ufffa\012\015\001\002\000\004\011" +
    "\155\001\002\000\004\005\022\001\002\000\006\002\uffff" +
    "\007\uffff\001\002\000\012\002\ufff6\006\007\007\ufff6\012" +
    "\ufff6\001\002\000\010\002\ufff5\007\ufff5\012\ufff5\001\002" +
    "\000\020\033\033\034\027\035\032\040\026\045\024\046" +
    "\031\047\023\001\002\000\014\013\045\014\046\015\047" +
    "\020\051\057\052\001\002\000\006\010\uffdd\041\uffdd\001" +
    "\002\000\004\010\152\001\002\000\012\011\036\030\135" +
    "\050\133\051\037\001\002\000\004\044\120\001\002\000" +
    "\004\010\104\001\002\000\014\013\045\014\046\015\047" +
    "\020\051\057\052\001\002\000\004\036\100\001\002\000" +
    "\006\007\034\012\015\001\002\000\012\010\uffd9\011\036" +
    "\041\uffd9\051\037\001\002\000\012\010\uffd9\011\036\041" +
    "\uffd9\051\037\001\002\000\012\023\uffd8\037\uffd8\053\071" +
    "\054\073\001\002\000\004\052\043\001\002\000\004\023" +
    "\042\001\002\000\006\010\uffe5\041\uffe5\001\002\000\006" +
    "\010\uffda\041\uffda\001\002\000\014\013\045\014\046\015" +
    "\047\020\051\057\052\001\002\000\012\023\uffd7\037\uffd7" +
    "\053\071\054\073\001\002\000\042\010\ufff3\016\ufff3\021" +
    "\ufff3\023\ufff3\027\ufff3\031\ufff3\033\ufff3\035\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\045\ufff3\046\ufff3\047\ufff3\053\ufff3\054" +
    "\ufff3\001\002\000\042\010\ufff2\016\ufff2\021\ufff2\023\ufff2" +
    "\027\ufff2\031\ufff2\033\ufff2\035\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\053\ufff2\054\ufff2\001\002" +
    "\000\042\010\ufff1\016\ufff1\021\ufff1\023\ufff1\027\ufff1\031" +
    "\ufff1\033\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\053\ufff1\054\ufff1\001\002\000\010\016" +
    "\056\021\060\027\057\001\002\000\012\013\045\014\046" +
    "\015\047\056\055\001\002\000\004\007\053\001\002\000" +
    "\034\010\uffe8\023\uffe8\031\uffe8\033\uffe8\035\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\045\uffe8\046\uffe8\047\uffe8\053\uffe8\054" +
    "\uffe8\001\002\000\034\010\uffed\023\uffed\031\uffed\033\uffed" +
    "\035\uffed\037\uffed\040\uffed\041\uffed\045\uffed\046\uffed\047" +
    "\uffed\053\uffed\054\uffed\001\002\000\034\010\uffe9\023\uffe9" +
    "\031\uffe9\033\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\053\uffe9\054\uffe9\001\002\000\004" +
    "\017\066\001\002\000\006\026\062\032\063\001\002\000" +
    "\004\025\061\001\002\000\034\010\uffea\023\uffea\031\uffea" +
    "\033\uffea\035\uffea\037\uffea\040\uffea\041\uffea\045\uffea\046" +
    "\uffea\047\uffea\053\uffea\054\uffea\001\002\000\004\030\065" +
    "\001\002\000\004\030\064\001\002\000\034\010\uffeb\023" +
    "\uffeb\031\uffeb\033\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\053\uffeb\054\uffeb\001\002\000" +
    "\034\010\uffec\023\uffec\031\uffec\033\uffec\035\uffec\037\uffec" +
    "\040\uffec\041\uffec\045\uffec\046\uffec\047\uffec\053\uffec\054" +
    "\uffec\001\002\000\004\032\067\001\002\000\004\030\070" +
    "\001\002\000\034\010\uffee\023\uffee\031\uffee\033\uffee\035" +
    "\uffee\037\uffee\040\uffee\041\uffee\045\uffee\046\uffee\047\uffee" +
    "\053\uffee\054\uffee\001\002\000\006\011\uffcd\051\uffcd\001" +
    "\002\000\006\011\036\051\037\001\002\000\006\011\uffcc" +
    "\051\uffcc\001\002\000\006\023\uffd6\037\uffd6\001\002\000" +
    "\006\011\036\051\037\001\002\000\006\023\uffd5\037\uffd5" +
    "\001\002\000\006\010\uffe4\041\uffe4\001\002\000\006\012" +
    "\015\025\101\001\002\000\006\010\uffe3\041\uffe3\001\002" +
    "\000\006\010\uffe2\041\uffe2\001\002\000\006\010\uffdf\041" +
    "\uffdf\001\002\000\024\002\uffef\006\uffef\007\uffef\012\uffef" +
    "\013\045\014\046\015\047\020\051\057\052\001\002\000" +
    "\004\031\107\001\002\000\012\002\ufff9\006\ufff9\007\ufff9" +
    "\012\ufff9\001\002\000\010\017\111\022\112\055\113\001" +
    "\002\000\012\002\ufff0\006\ufff0\007\ufff0\012\ufff0\001\002" +
    "\000\004\032\116\001\002\000\004\030\115\001\002\000" +
    "\004\025\114\001\002\000\012\002\uffce\006\uffce\007\uffce" +
    "\012\uffce\001\002\000\012\002\uffcf\006\uffcf\007\uffcf\012" +
    "\uffcf\001\002\000\004\030\117\001\002\000\012\002\uffd0" +
    "\006\uffd0\007\uffd0\012\uffd0\001\002\000\006\042\122\043" +
    "\121\001\002\000\014\013\045\014\046\015\047\020\051" +
    "\057\052\001\002\000\014\013\045\014\046\015\047\020" +
    "\051\057\052\001\002\000\016\033\033\035\032\040\026" +
    "\045\024\046\031\047\023\001\002\000\006\010\uffe6\041" +
    "\125\001\002\000\016\033\033\035\032\040\026\045\024" +
    "\046\031\047\023\001\002\000\004\010\uffdc\001\002\000" +
    "\004\010\uffe7\001\002\000\016\033\033\035\032\040\026" +
    "\045\024\046\031\047\023\001\002\000\006\010\uffe6\041" +
    "\125\001\002\000\004\010\uffdb\001\002\000\004\052\146" +
    "\001\002\000\004\037\144\001\002\000\006\037\uffd4\053" +
    "\141\001\002\000\004\037\137\001\002\000\014\013\045" +
    "\014\046\015\047\020\051\057\052\001\002\000\006\010" +
    "\uffe1\041\uffe1\001\002\000\006\030\uffcb\050\uffcb\001\002" +
    "\000\006\030\135\050\133\001\002\000\004\037\uffd1\001" +
    "\002\000\014\013\045\014\046\015\047\020\051\057\052" +
    "\001\002\000\006\010\uffe0\041\uffe0\001\002\000\014\013" +
    "\045\014\046\015\047\020\051\057\052\001\002\000\006" +
    "\037\uffd3\053\141\001\002\000\006\030\135\050\133\001" +
    "\002\000\004\037\uffd2\001\002\000\024\002\uffef\006\uffef" +
    "\007\uffef\012\uffef\013\045\014\046\015\047\020\051\057" +
    "\052\001\002\000\012\002\ufff8\006\ufff8\007\ufff8\012\ufff8" +
    "\001\002\000\006\010\uffde\041\uffde\001\002\000\014\005" +
    "\ufff4\010\ufff4\011\ufff4\041\ufff4\051\ufff4\001\002\000\006" +
    "\002\ufffb\007\ufffb\001\002\000\004\005\163\001\002\000" +
    "\006\002\ufffc\007\157\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffd\001\002\000\004\006\164\001\002\000" +
    "\010\002\ufffa\007\ufffa\012\015\001\002\000\006\002\ufffe" +
    "\007\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\002\003\003\004\021\005\001\001\000" +
    "\002\001\001\000\006\004\157\007\160\001\001\000\002" +
    "\001\001\000\004\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\016\006\013" +
    "\012\015\022\017\001\001\000\012\005\155\006\013\012" +
    "\015\022\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\020\001\001\000\002\001" +
    "\001\000\006\010\027\023\024\001\001\000\006\013\153" +
    "\020\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\133\026\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\102\020\047\001\001\000\002\001" +
    "\001\000\004\012\034\001\001\000\006\016\076\017\037" +
    "\001\001\000\006\016\040\017\037\001\001\000\004\024" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\043\020\047\001" +
    "\001\000\004\024\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\105" +
    "\013\104\020\047\001\001\000\004\014\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\127\020\047\001\001\000" +
    "\006\013\122\020\047\001\001\000\004\010\123\001\001" +
    "\000\004\015\125\001\001\000\004\010\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\130\001\001" +
    "\000\004\015\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\141\001\001\000\002" +
    "\001\001\000\006\013\137\020\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\142\001\001\000\002" +
    "\001\001\000\006\013\144\020\047\001\001\000\002\001" +
    "\001\000\006\013\146\020\047\001\001\000\004\025\147" +
    "\001\001\000\004\026\150\001\001\000\002\001\001\000" +
    "\010\011\152\013\104\020\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\157\007\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\164\006\013\012\015\022\017\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MainClass SetOfFunction 
            {
                XMLElement RESULT;
		Location MainClassxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location MainClassxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object MainClass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfFunctionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfFunctionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfFunctions = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Program",0,(XMLElement)MainClass,(XMLElement)SetOfFunctions);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
                XMLElement RESULT;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object EOF1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("_START",0,(XMLElement)start_val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= SetOfNewline MAIN COLON NEWLINE SetOfSteps 
            {
                XMLElement RESULT;
		Location SetOfNewLinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location SetOfNewLinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object SetOfNewLine = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Mainxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Mainxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Colonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Colonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Newlinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Newlinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Newline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfStepsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfStepsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfSteps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("MainClass",0,(XMLElement)SetOfNewLine,new XMLElement.Terminal(Mainxleft,"Main",Main,Mainxright),new XMLElement.Terminal(Colonxleft,"Colon",Colon,Colonxright),new XMLElement.Terminal(Newlinexleft,"Newline",Newline,Newlinexright),(XMLElement)SetOfSteps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Function ::= ID COLON NEWLINE SetOfSteps 
            {
                XMLElement RESULT;
		Location IDxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location IDxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Colonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Colonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Newlinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Newlinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Newline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfStepsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfStepsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfSteps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Function",0,new XMLElement.Terminal(IDxleft,"ID",ID,IDxright),new XMLElement.Terminal(Colonxleft,"Colon",Colon,Colonxright),new XMLElement.Terminal(Newlinexleft,"Newline",Newline,Newlinexright),(XMLElement)SetOfSteps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SetOfFunction ::= Function SetOfFunction 
            {
                XMLElement RESULT;
		Location Functionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Functionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Function = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfFunctionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfFunctionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfFunctions = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SetOfFunction",0,(XMLElement)Function,(XMLElement)SetOfFunctions);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SetOfFunction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SetOfFunction ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("SetOfFunction",1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SetOfFunction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SetOfSteps ::= Step SetOfSteps 
            {
                XMLElement RESULT;
		Location Stepxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Stepxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Step = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfStepsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfStepsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfSteps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SetOfSteps",0,(XMLElement)Step,(XMLElement)SetOfSteps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SetOfSteps",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SetOfSteps ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("SetOfSteps",1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SetOfSteps",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // StepLine ::= StepNumber COLON Stmt PIPE Result 
            {
                XMLElement RESULT;
		Location StepNumberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location StepNumberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object StepNumber = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Colonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Colonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Pipexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Pipexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Pipe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Resultxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Resultxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Result = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StepLine",0,(XMLElement)StepNumber,new XMLElement.Terminal(Colonxleft,"Colon",Colon,Colonxright),(XMLElement)Stmt,new XMLElement.Terminal(Pipexleft,"Pipe",Pipe,Pipexright),(XMLElement)Result);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StepLine",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StepLine ::= StepNumber COLON IfStmt PIPE Result 
            {
                XMLElement RESULT;
		Location StepNumberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location StepNumberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object StepNumber = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Colonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Colonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location IfStmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location IfStmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object IfStmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Pipexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Pipexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Pipe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Resultxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Resultxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Result = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StepLine",1,(XMLElement)StepNumber,new XMLElement.Terminal(Colonxleft,"Colon",Colon,Colonxright),(XMLElement)IfStmt,new XMLElement.Terminal(Pipexleft,"Pipe",Pipe,Pipexright),(XMLElement)Result);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StepLine",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SetOfNewline ::= NEWLINE SetOfNewline 
            {
                XMLElement RESULT;
		Location Newlinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Newlinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Newline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfNewLinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfNewLinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfNewLine = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SetOfNewline",0,new XMLElement.Terminal(Newlinexleft,"Newline",Newline,Newlinexright),(XMLElement)SetOfNewLine);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SetOfNewline",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SetOfNewline ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("SetOfNewline",1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SetOfNewline",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Step ::= StepLine SetOfNewline 
            {
                XMLElement RESULT;
		Location StepLinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location StepLinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object StepLine = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location SetOfNewLinexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location SetOfNewLinexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object SetOfNewLine = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Step",0,(XMLElement)StepLine,(XMLElement)SetOfNewLine);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Step",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StepNumber ::= STEPLITERAL INTEGER 
            {
                XMLElement RESULT;
		Location Stepliteralxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Stepliteralxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Stepliteral = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Integerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Integerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StepNumber",0,new XMLElement.Terminal(Stepliteralxleft,"Stepliteral",Stepliteral,Stepliteralxright),new XMLElement.Terminal(Integerxleft,"Integer",Integer,Integerxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StepNumber",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DocumentObj ::= BUTTON 
            {
                XMLElement RESULT;
		Location Buttonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Buttonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Button = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("DocumentObj",0,new XMLElement.Terminal(Buttonxleft,"Button",Button,Buttonxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DocumentObj",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DocumentObj ::= WEBPAGE 
            {
                XMLElement RESULT;
		Location Webpagexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Webpagexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Webpage = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("DocumentObj",1,new XMLElement.Terminal(Webpagexleft,"Webpage",Webpage,Webpagexright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DocumentObj",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DocumentObj ::= TEXTFIELD 
            {
                XMLElement RESULT;
		Location Textfieldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Textfieldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Textfield = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("DocumentObj",2,new XMLElement.Terminal(Textfieldxleft,"Textfield",Textfield,Textfieldxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DocumentObj",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Result ::= ObjectExpr ShouldPhrase 
            {
                XMLElement RESULT;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ShouldPhrasexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ShouldPhrasexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ShouldPhrase = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Result",0,(XMLElement)ObjectExpr,(XMLElement)ShouldPhrase);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Result",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Result ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("Result",1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Result",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ObjectExpr ::= DocumentObj THAT HAVE VALUE STRING_LITERAL 
            {
                XMLElement RESULT;
		Location DocumentObjectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location DocumentObjectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object DocumentObject = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Thatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Thatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object That = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Havexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Havexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Have = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",0,(XMLElement)DocumentObject,new XMLElement.Terminal(Thatxleft,"That",That,Thatxright),new XMLElement.Terminal(Havexleft,"Have",Have,Havexright),new XMLElement.Terminal(Valuexleft,"Value",Value,Valuexright),new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ObjectExpr ::= LOCALITYINDIC DocumentObj 
            {
                XMLElement RESULT;
		Location LocalityIndicxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location LocalityIndicxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object LocalityIndic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location DocumentObjectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location DocumentObjectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object DocumentObject = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",1,new XMLElement.Terminal(LocalityIndicxleft,"LocalityIndic",LocalityIndic,LocalityIndicxright),(XMLElement)DocumentObject);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ObjectExpr ::= DocumentObj WITH ATTRIBUTE STRING_LITERAL 
            {
                XMLElement RESULT;
		Location DocumentObjectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location DocumentObjectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object DocumentObject = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Withxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Withxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object With = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Attributexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Attributexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Attribute = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",2,(XMLElement)DocumentObject,new XMLElement.Terminal(Withxleft,"With",With,Withxright),new XMLElement.Terminal(Attributexleft,"Attribute",Attribute,Attributexright),new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ObjectExpr ::= DocumentObj WITH VALUE STRING_LITERAL 
            {
                XMLElement RESULT;
		Location DocumentObjectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location DocumentObjectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object DocumentObject = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Withxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Withxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object With = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",3,(XMLElement)DocumentObject,new XMLElement.Terminal(Withxleft,"With",With,Withxright),new XMLElement.Terminal(Valuexleft,"Value",Value,Valuexright),new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ObjectExpr ::= DocumentObj POSITIONINDIC URL 
            {
                XMLElement RESULT;
		Location DocumentObjectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location DocumentObjectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object DocumentObject = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Positionindicxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Positionindicxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Positionindic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location URLxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location URLxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object URL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",4,(XMLElement)DocumentObject,new XMLElement.Terminal(Positionindicxleft,"Positionindic",Positionindic,Positionindicxright),new XMLElement.Terminal(URLxleft,"URL",URL,URLxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ObjectExpr ::= LOCALITYINDIC URL_LITERAL 
            {
                XMLElement RESULT;
		Location LocalityIndicxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location LocalityIndicxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object LocalityIndic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location URL_Literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location URL_Literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object URL_Literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",5,new XMLElement.Terminal(LocalityIndicxleft,"LocalityIndic",LocalityIndic,LocalityIndicxright),new XMLElement.Terminal(URL_Literalxleft,"URL_Literal",URL_Literal,URL_Literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ObjectExpr ::= PREDEFINED ID 
            {
                XMLElement RESULT;
		Location Predefinedxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Predefinedxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Predefined = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location IDxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location IDxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ObjectExpr",6,new XMLElement.Terminal(Predefinedxleft,"Predefined",Predefined,Predefinedxright),new XMLElement.Terminal(IDxleft,"ID",ID,IDxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectExpr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OtherwiseStmt ::= OTHERWISE Stmt 
            {
                XMLElement RESULT;
		Location Otherwisexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Otherwisexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Otherwise = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("OtherwiseStmt",0,new XMLElement.Terminal(Otherwisexleft,"Otherwise",Otherwise,Otherwisexright),(XMLElement)Stmt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherwiseStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OtherwiseStmt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("OtherwiseStmt",1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherwiseStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= DO StepNumber IntegerTime 
            {
                XMLElement RESULT;
		Location Doxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Doxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Do = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location StepNumberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location StepNumberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object StepNumber = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location IntegerTimexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location IntegerTimexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object IntegerTime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",0,new XMLElement.Terminal(Doxleft,"Do",Do,Doxright),(XMLElement)StepNumber,(XMLElement)IntegerTime);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= DO ID IntegerTime 
            {
                XMLElement RESULT;
		Location Doxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Doxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Do = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location IDxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location IDxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location IntegerTimexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location IntegerTimexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object IntegerTime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",1,new XMLElement.Terminal(Doxleft,"Do",Do,Doxright),new XMLElement.Terminal(IDxleft,"ID",ID,IDxright),(XMLElement)IntegerTime);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= GO TO URL 
            {
                XMLElement RESULT;
		Location Goxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Goxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Go = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Toxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Toxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object To = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location URLxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location URLxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object URL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",2,new XMLElement.Terminal(Goxleft,"Go",Go,Goxright),new XMLElement.Terminal(Toxleft,"To",To,Toxright),new XMLElement.Terminal(URLxleft,"URL",URL,URLxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= GO TO StepNumber 
            {
                XMLElement RESULT;
		Location Goxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Goxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Go = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Toxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Toxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object To = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location StepNumberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location StepNumberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object StepNumber = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",3,new XMLElement.Terminal(Goxleft,"Go",Go,Goxright),new XMLElement.Terminal(Toxleft,"To",To,Toxright),(XMLElement)StepNumber);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= ENTER StringExpr INTO ObjectExpr 
            {
                XMLElement RESULT;
		Location Enterxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Enterxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Enter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location StringExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location StringExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object StringExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Intoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Intoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Into = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",4,new XMLElement.Terminal(Enterxleft,"Enter",Enter,Enterxright),(XMLElement)StringExpr,new XMLElement.Terminal(Intoxleft,"Into",Into,Intoxright),(XMLElement)ObjectExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stmt ::= ENTER IntegerExpr INTO ObjectExpr 
            {
                XMLElement RESULT;
		Location Enterxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Enterxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Enter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location IntegerExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location IntegerExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object IntegerExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Intoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Intoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Into = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",5,new XMLElement.Terminal(Enterxleft,"Enter",Enter,Enterxright),(XMLElement)IntegerExpr,new XMLElement.Terminal(Intoxleft,"Into",Into,Intoxright),(XMLElement)ObjectExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stmt ::= CLICK ObjectExpr 
            {
                XMLElement RESULT;
		Location Clickxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Clickxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Click = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",6,new XMLElement.Terminal(Clickxleft,"Click",Click,Clickxright),(XMLElement)ObjectExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stmt ::= REFRESH ObjectExpr 
            {
                XMLElement RESULT;
		Location Refreshxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Refreshxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Refresh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",7,new XMLElement.Terminal(Refreshxleft,"Refresh",Refresh,Refreshxright),(XMLElement)ObjectExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stmt ::= EXIT 
            {
                XMLElement RESULT;
		Location Exitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Exitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Exit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",8,new XMLElement.Terminal(Exitxleft,"Exit",Exit,Exitxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IfStmt ::= IF THERE IS ObjectExpr Stmt OtherwiseStmt 
            {
                XMLElement RESULT;
		Location Ifxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location Ifxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object If = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location Therexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location Therexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object There = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Isxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Isxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location OtherwiseStmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location OtherwiseStmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object OtherwiseStmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IfStmt",0,new XMLElement.Terminal(Ifxleft,"If",If,Ifxright),new XMLElement.Terminal(Therexleft,"There",There,Therexright),new XMLElement.Terminal(Isxleft,"Is",Is,Isxright),(XMLElement)ObjectExpr,(XMLElement)Stmt,(XMLElement)OtherwiseStmt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IfStmt ::= IF THERE EXISTS ObjectExpr Stmt OtherwiseStmt 
            {
                XMLElement RESULT;
		Location Ifxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location Ifxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object If = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location Therexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location Therexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object There = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Existsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Existsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Exists = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location OtherwiseStmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location OtherwiseStmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object OtherwiseStmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IfStmt",1,new XMLElement.Terminal(Ifxleft,"If",If,Ifxright),new XMLElement.Terminal(Therexleft,"There",There,Therexright),new XMLElement.Terminal(Existsxleft,"Exists",Exists,Existsxright),(XMLElement)ObjectExpr,(XMLElement)Stmt,(XMLElement)OtherwiseStmt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IntegerTime ::= IntegerExpr TIME 
            {
                XMLElement RESULT;
		Location IntegerExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location IntegerExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object IntegerExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location Timexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Timexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Time = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntegerTime",0,(XMLElement)IntegerExpr,new XMLElement.Terminal(Timexleft,"Time",Time,Timexright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerTime",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IntegerTime ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("IntegerTime",1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerTime",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IntegerExpr ::= INTEGER 
            {
                XMLElement RESULT;
		Location Integerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Integerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntegerExpr",0,new XMLElement.Terminal(Integerxleft,"Integer",Integer,Integerxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IntegerExpr ::= NUMBER FROM ObjectExpr 
            {
                XMLElement RESULT;
		Location Numberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Numberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Number = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Fromxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Fromxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object From = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntegerExpr",1,new XMLElement.Terminal(Numberxleft,"Number",Number,Numberxright),new XMLElement.Terminal(Fromxleft,"From",From,Fromxright),(XMLElement)ObjectExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IntegerExpr ::= NUMBER FROM ObjectExpr IntOperation IntegerExpr 
            {
                XMLElement RESULT;
		Location Numberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location Numberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object Number = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Fromxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Fromxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object From = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location IntOperationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location IntOperationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object IntOperation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location IntegerExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location IntegerExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object IntegerExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntegerExpr",2,new XMLElement.Terminal(Numberxleft,"Number",Number,Numberxright),new XMLElement.Terminal(Fromxleft,"From",From,Fromxright),(XMLElement)ObjectExpr,(XMLElement)IntOperation,(XMLElement)IntegerExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IntegerExpr ::= INTEGER IntOperation IntegerExpr 
            {
                XMLElement RESULT;
		Location Integerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Integerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location IntOperationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location IntOperationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object IntOperation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location IntegerExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location IntegerExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object IntegerExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntegerExpr",3,new XMLElement.Terminal(Integerxleft,"Integer",Integer,Integerxright),(XMLElement)IntOperation,(XMLElement)IntegerExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StringExpr ::= STRING_LITERAL 
            {
                XMLElement RESULT;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StringExpr",0,new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StringExpr ::= TEXT FROM ObjectExpr 
            {
                XMLElement RESULT;
		Location Textxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Textxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Fromxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Fromxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object From = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StringExpr",1,new XMLElement.Terminal(Textxleft,"Text",Text,Textxright),new XMLElement.Terminal(Fromxleft,"From",From,Fromxright),(XMLElement)ObjectExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StringExpr ::= TEXT FROM ObjectExpr StrOperation StringExpr 
            {
                XMLElement RESULT;
		Location Textxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location Textxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object Text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location Fromxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Fromxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object From = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location ObjectExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location ObjectExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object ObjectExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location StrOperationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location StrOperationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object StrOperation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location StringExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location StringExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object StringExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StringExpr",2,new XMLElement.Terminal(Textxleft,"Text",Text,Textxright),new XMLElement.Terminal(Fromxleft,"From",From,Fromxright),(XMLElement)ObjectExpr,(XMLElement)StrOperation,(XMLElement)StringExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StringExpr ::= STRING_LITERAL StrOperation StringExpr 
            {
                XMLElement RESULT;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location StrOperationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location StrOperationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object StrOperation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location StringExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location StringExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object StringExpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StringExpr",3,new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright),(XMLElement)StrOperation,(XMLElement)StringExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ShouldPhrase ::= SHOULD HAVE VALUE STRING_LITERAL 
            {
                XMLElement RESULT;
		Location Shouldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location Shouldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object Should = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location Havexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Havexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Have = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ShouldPhrase",0,new XMLElement.Terminal(Shouldxleft,"Should",Should,Shouldxright),new XMLElement.Terminal(Havexleft,"Have",Have,Havexright),new XMLElement.Terminal(Valuexleft,"Value",Value,Valuexright),new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShouldPhrase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ShouldPhrase ::= SHOULD CONTAIN STRING_LITERAL 
            {
                XMLElement RESULT;
		Location Shouldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Shouldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Should = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Containxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Containxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Contain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location String_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location String_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object String_literal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ShouldPhrase",1,new XMLElement.Terminal(Shouldxleft,"Should",Should,Shouldxright),new XMLElement.Terminal(Containxleft,"Contain",Contain,Containxright),new XMLElement.Terminal(String_literalxleft,"String_literal",String_literal,String_literalxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShouldPhrase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ShouldPhrase ::= SHOULD BE URL 
            {
                XMLElement RESULT;
		Location Shouldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location Shouldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object Should = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location Bexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location Bexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object Be = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location URLxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location URLxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object URL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ShouldPhrase",2,new XMLElement.Terminal(Shouldxleft,"Should",Should,Shouldxright),new XMLElement.Terminal(Bexleft,"Be",Be,Bexright),new XMLElement.Terminal(URLxleft,"URL",URL,URLxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ShouldPhrase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IntOperation ::= PLUS 
            {
                XMLElement RESULT;
		Location Plusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Plusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntOperation",0,new XMLElement.Terminal(Plusxleft,"Plus",Plus,Plusxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntOperation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IntOperation ::= MINUS 
            {
                XMLElement RESULT;
		Location Minusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Minusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IntOperation",1,new XMLElement.Terminal(Minusxleft,"Minus",Minus,Minusxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntOperation",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StrOperation ::= PLUS 
            {
                XMLElement RESULT;
		Location Plusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location Plusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object Plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StrOperation",0,new XMLElement.Terminal(Plusxleft,"Plus",Plus,Plusxright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StrOperation",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
